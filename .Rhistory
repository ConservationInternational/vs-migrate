group_by(Country) %>%
fill(stability_violence) %>%
mutate(iso3c=countrycode(Country, 'country.name', 'iso3c'))
comb <- merge(admin_dat, stability)
#Downloaded from http://info.worldbank.org/governance/wgi/#home
stability <- read_xlsx("G://My Drive/DHS Spatial Covars/World Governance Indicators/wgidataset.xlsx", sheet = "Political StabilityNoViolence", skip=13, na = "#N/A") %>%
dplyr::select(Country=X__1, WBCode=X__2, `1996`,`1998`, `2000`, `2002`, `2003`,
`2004`, `2005`, `2006`, `2007`, `2008`, `2009`, `2010`, `2011`, `2012`, `2013`, `2014`,
`2015`, `2016`, `2017`) %>%
filter(Country != 'Country/Territory') %>%
mutate(`1990` = NA, `1991`=NA, `1992`=NA, `1993`=NA, `1994`=NA, `1995`=NA, `1997`=NA, `1999`=NA,
`2001` = NA, `2018`=NA, `2019`=NA, `2020`=NA, `1989`=NA, `1988`=NA) %>%
gather(interview_year, stability_violence, -Country, -WBCode) %>%
mutate(stability_violence=as.numeric(stability_violence)) %>%
arrange(desc(interview_year)) %>%
group_by(Country) %>%
fill(stability_violence) %>%
arrange(interview_year) %>%
group_by(Country) %>%
fill(stability_violence) %>%
mutate(iso3c=countrycode(Country, 'country.name', 'iso3c'))
comb <- merge(admin_dat, stability)
head(comb)
hist(comb$stability_violence)
hist(comb$stability_violence, 100)
comb[comb$stability_violence == max(comb$stability_violence), ]
comb[comb$stability_violence > 1.5, ]
comb[comb$stability_violence == min(comb$stability_violence), ]
admin_dat$bodycount[admin_dat$NAME_1=='Somalia' & admin_dat$interview_year==2009]
head(admin_dat)
admin_dat$bodycount[admin_dat$NAME_0=='Somalia' & admin_dat$interview_year==2009]
table(admin_dat[admin_dat$NAME_0=='Somalia', c('NAME_0', 'interview_year')]
']'
table(admin_dat[admin_dat$NAME_0=='Somalia', c('NAME_0', 'interview_year')])
table(admin_dat[admin_dat$NAME_0=='Somalia', c('bodycount', 'interview_year')])
hist(admin_dat$bodycount[admin_dat$year==2009])
admin_dat$bodycount[admin_dat$year==2009]
admin_dat$bodycount[admin_dat$interview_year==2009]
admin_dat$bodycount[admin_dat$interview_year==2009] %>% hist
admin_dat$bodycount[admin_dat$interview_year==2009] %>% hist
library(rgdal)
library(dplyr)
library(raster)
library(tidyverse)
library(countrycode)
library(readxl)
admin1 <- readOGR('G://My Drive/DHS Spatial Covars/UCDP-PRIO Armed Conflict Dataset', 'admin1_data')
admin_dat <- admin1@data %>%
dplyr::select(-VARNAME_1, -NL_NAME_1, -TYPE_1, -ENGTYPE_1, -CC_1, -HASC_1) %>%
mutate(X2017=X2017/area_sqkm, X2016=X2016/area_sqkm, X2015=X2015/area_sqkm, X2014=X2014/area_sqkm,
X2013=X2013/area_sqkm, X2012=X2012/area_sqkm, X2011=X2011/area_sqkm, X2010=X2010/area_sqkm,
X2009=X2009/area_sqkm, X2008=X2008/area_sqkm, X2007=X2007/area_sqkm, X2006=X2006/area_sqkm,
X2005=X2005/area_sqkm, X2004=X2004/area_sqkm, X2003=X2003/area_sqkm, X2002=X2002/area_sqkm,
X2001=X2001/area_sqkm, X2000=X2000/area_sqkm, X1999=X1999/area_sqkm, X1998=X1998/area_sqkm,
X1997=X1997/area_sqkm, X1996=X1996/area_sqkm, X1995=X1995/area_sqkm, X1994=X1994/area_sqkm,
X1993=X1993/area_sqkm, X1992=X1992/area_sqkm) %>%
gather(interview_year, bodycount, -GID_0, -NAME_0, -GID_1, -NAME_1, -area_sqkm) %>%
mutate(interview_year=as.numeric(substr(interview_year, 2, 5)),
iso3c=countrycode(NAME_0, 'country.name', 'iso3c'))
#Downloaded from http://info.worldbank.org/governance/wgi/#home
stability <- read_xlsx("G://My Drive/DHS Spatial Covars/World Governance Indicators/wgidataset.xlsx", sheet = "Political StabilityNoViolence", skip=13, na = "#N/A") %>%
dplyr::select(Country=X__1, WBCode=X__2, `1996`,`1998`, `2000`, `2002`, `2003`,
`2004`, `2005`, `2006`, `2007`, `2008`, `2009`, `2010`, `2011`, `2012`, `2013`, `2014`,
`2015`, `2016`, `2017`) %>%
filter(Country != 'Country/Territory') %>%
mutate(`1990` = NA, `1991`=NA, `1992`=NA, `1993`=NA, `1994`=NA, `1995`=NA, `1997`=NA, `1999`=NA,
`2001` = NA, `2018`=NA, `2019`=NA, `2020`=NA, `1989`=NA, `1988`=NA) %>%
gather(interview_year, stability_violence, -Country, -WBCode) %>%
mutate(stability_violence=as.numeric(stability_violence)) %>%
arrange(desc(interview_year)) %>%
group_by(Country) %>%
fill(stability_violence) %>%
arrange(interview_year) %>%
group_by(Country) %>%
fill(stability_violence) %>%
mutate(iso3c=countrycode(Country, 'country.name', 'iso3c'))
comb <- merge(admin_dat, stability)
head(comb)
sum(is.na(comb$bodycount))
comb <- comb %>%
group_by(interview_year, Country) %>%
mutate(sd=sd(bodycount))
head(comb)
View(comb)
View(comb %>% filter(NAME_0=='Afghanistan'))
admin1 <- readOGR('G://My Drive/DHS Spatial Covars/UCDP-PRIO Armed Conflict Dataset', 'admin1_data')
head(admin1@data)
admin_dat <- admin1@data %>%
dplyr::select(-VARNAME_1, -NL_NAME_1, -TYPE_1, -ENGTYPE_1, -CC_1, -HASC_1) %>%
mutate(X2017=X2017/area_sqkm, X2016=X2016/area_sqkm, X2015=X2015/area_sqkm, X2014=X2014/area_sqkm,
X2013=X2013/area_sqkm, X2012=X2012/area_sqkm, X2011=X2011/area_sqkm, X2010=X2010/area_sqkm,
X2009=X2009/area_sqkm, X2008=X2008/area_sqkm, X2007=X2007/area_sqkm, X2006=X2006/area_sqkm,
X2005=X2005/area_sqkm, X2004=X2004/area_sqkm, X2003=X2003/area_sqkm, X2002=X2002/area_sqkm,
X2001=X2001/area_sqkm, X2000=X2000/area_sqkm, X1999=X1999/area_sqkm, X1998=X1998/area_sqkm,
X1997=X1997/area_sqkm, X1996=X1996/area_sqkm, X1995=X1995/area_sqkm, X1994=X1994/area_sqkm,
X1993=X1993/area_sqkm, X1992=X1992/area_sqkm) %>%
gather(interview_year, bodycount, -GID_0, -NAME_0, -GID_1, -NAME_1, -area_sqkm) %>%
mutate(interview_year=as.numeric(substr(interview_year, 2, 5)),
iso3c=countrycode(NAME_0, 'country.name', 'iso3c'))
#Downloaded from http://info.worldbank.org/governance/wgi/#home
stability <- read_xlsx("G://My Drive/DHS Spatial Covars/World Governance Indicators/wgidataset.xlsx", sheet = "Political StabilityNoViolence", skip=13, na = "#N/A") %>%
dplyr::select(Country=X__1, WBCode=X__2, `1996`,`1998`, `2000`, `2002`, `2003`,
`2004`, `2005`, `2006`, `2007`, `2008`, `2009`, `2010`, `2011`, `2012`, `2013`, `2014`,
`2015`, `2016`, `2017`) %>%
filter(Country != 'Country/Territory') %>%
mutate(`1990` = NA, `1991`=NA, `1992`=NA, `1993`=NA, `1994`=NA, `1995`=NA, `1997`=NA, `1999`=NA,
`2001` = NA, `2018`=NA, `2019`=NA, `2020`=NA, `1989`=NA, `1988`=NA) %>%
gather(interview_year, stability_violence, -Country, -WBCode) %>%
mutate(stability_violence=as.numeric(stability_violence)) %>%
arrange(desc(interview_year)) %>%
group_by(Country) %>%
fill(stability_violence) %>%
arrange(interview_year) %>%
group_by(Country) %>%
fill(stability_violence) %>%
mutate(iso3c=countrycode(Country, 'country.name', 'iso3c'))
comb <- merge(admin_dat, stability)
comb <- comb %>%
group_by(interview_year, Country) %>%
mutate(sd=sd(bodycount))
head(comn)
head(comb)
head(admin1@data)
head(admin_dat)
head(stability)
comb <- merge(admin_dat, stability)
head(comb)
comb <- comb %>%
group_by(interview_year, Country) %>%
mutate(sd=sd(bodycount))
head(comb)
View(comb)
admin_dat <- admin1@data %>%
dplyr::select(-VARNAME_1, -NL_NAME_1, -TYPE_1, -ENGTYPE_1, -CC_1, -HASC_1) %>%
mutate(X2017=X2017/area_sqkm, X2016=X2016/area_sqkm, X2015=X2015/area_sqkm, X2014=X2014/area_sqkm,
X2013=X2013/area_sqkm, X2012=X2012/area_sqkm, X2011=X2011/area_sqkm, X2010=X2010/area_sqkm,
X2009=X2009/area_sqkm, X2008=X2008/area_sqkm, X2007=X2007/area_sqkm, X2006=X2006/area_sqkm,
X2005=X2005/area_sqkm, X2004=X2004/area_sqkm, X2003=X2003/area_sqkm, X2002=X2002/area_sqkm,
X2001=X2001/area_sqkm, X2000=X2000/area_sqkm, X1999=X1999/area_sqkm, X1998=X1998/area_sqkm,
X1997=X1997/area_sqkm, X1996=X1996/area_sqkm, X1995=X1995/area_sqkm, X1994=X1994/area_sqkm,
X1993=X1993/area_sqkm, X1992=X1992/area_sqkm)
head(admin1@data)
admin_dat <- admin1@data %>%
mutate(X2017=X2017/area_sqkm, X2016=X2016/area_sqkm, X2015=X2015/area_sqkm, X2014=X2014/area_sqkm,
X2013=X2013/area_sqkm, X2012=X2012/area_sqkm, X2011=X2011/area_sqkm, X2010=X2010/area_sqkm,
X2009=X2009/area_sqkm, X2008=X2008/area_sqkm, X2007=X2007/area_sqkm, X2006=X2006/area_sqkm,
X2005=X2005/area_sqkm, X2004=X2004/area_sqkm, X2003=X2003/area_sqkm, X2002=X2002/area_sqkm,
X2001=X2001/area_sqkm, X2000=X2000/area_sqkm, X1999=X1999/area_sqkm, X1998=X1998/area_sqkm,
X1997=X1997/area_sqkm, X1996=X1996/area_sqkm, X1995=X1995/area_sqkm, X1994=X1994/area_sqkm,
X1993=X1993/area_sqkm, X1992=X1992/area_sqkm)
head(admin_dat)
admin_dat <- admin1@data %>%
mutate(X2017=X2017/area_sqkm, X2016=X2016/area_sqkm, X2015=X2015/area_sqkm, X2014=X2014/area_sqkm,
X2013=X2013/area_sqkm, X2012=X2012/area_sqkm, X2011=X2011/area_sqkm, X2010=X2010/area_sqkm,
X2009=X2009/area_sqkm, X2008=X2008/area_sqkm, X2007=X2007/area_sqkm, X2006=X2006/area_sqkm,
X2005=X2005/area_sqkm, X2004=X2004/area_sqkm, X2003=X2003/area_sqkm, X2002=X2002/area_sqkm,
X2001=X2001/area_sqkm, X2000=X2000/area_sqkm, X1999=X1999/area_sqkm, X1998=X1998/area_sqkm,
X1997=X1997/area_sqkm, X1996=X1996/area_sqkm, X1995=X1995/area_sqkm, X1994=X1994/area_sqkm,
X1993=X1993/area_sqkm, X1992=X1992/area_sqkm) %>%
gather(interview_year, bodycount, -GID_0, -NAME_0, -GID_1, -NAME_1, -area_sqkm) %>%
mutate(interview_year=as.numeric(substr(interview_year, 2, 5)),
iso3c=countrycode(NAME_0, 'country.name', 'iso3c'))
head(admin_dat)
comb <- merge(admin_dat, stability)
head(comb)
comb <- comb %>%
group_by(interview_year, Country) %>%
mutate(sd=sd(bodycount))
head(comb)
hist(comb$sd)
hist(comb$sd, 1000)
comb[comb$sd==max(comb$sd), ]
comb[comb$sd > 0,1, ]
comb[comb$sd > 0.1, ]
comb[comb$sd > 0.01, ]
comb[comb$sd > 0.05, ]
comb[comb$sd > 0.05, ] %>% View
sqrt(255725)
library(dplyr)
library(dbplyr)
library(XML)
library(RPostgreSQL)
library(readxl)
library(tidyr)
setwd('C://Git/vs-migrate/')
db <- 'local'
#db <- 'prod'
#This variable determines whether 1) the script will overwrite exisiting data and 2) the migration will be added to the migration_audit table.
#test <- FALSE
test <- TRUE
forms <- c('vs_household_secv_15_may_2016', 'ffs_yields_dry_weight_17_sep_2015_v1',
'ffs_yields_paddy_maize_17_sep_2015_v1', 'eplot_15_may_2016_v1',
'agriculture_survey_15_may_2016', 'house_hold_15_may_2016_v1')
options(stringsAsFactors = F)
source('utils.R')
source('formhub_connection.R')
fhcon <- src_postgres(dbname = dbname, host = host, port = port, user = user, password = password)
if (db=='prod'){
source('production_connection.R')
dbcon <- src_postgres(dbname = dbname, host = host, port = port, user = user, password = password)
}
if (db=='local'){
source('local_connection.R')
dbcon <- src_postgres(dbname = dbname, host = host, port = port, user = user, password = password)
}
#Get a list of all xform ids
xforms <- tbl(fhcon, 'odk_logger_xform') %>%
select(id, id_string) %>%
collect
ids <- xforms$id[xforms$id_string %in% forms]
#Get a list of all previous migration IDs
migrations <- tbl(dbcon, 'migration_audit') %>%
select(uuid) %>%
collect %>%
.$uuid
#Get all forms that do not have an ID in migration_audit
instances <- tbl(fhcon, 'odk_logger_instance') %>%
filter((!uuid %in% migrations)) %>%
select(xml, uuid, xform_id) %>%
collect %>%
filter(xform_id %in% ids)
scripts <- list.files(path='migrations', pattern='.R$', recursive = T)
for (s in scripts){
source(paste0('migrations/', s))
}
for (i in nrow(instances):1){
cat(i, i/nrow(instances), '\n')
if (instances$xform_id[i]==34){
ffs_yields_maize_17_sep_2015_v1(dbcon, instances$xml[i], test=test)
}
if (instances$xform_id[i]==63){
agriculture_survey_15_may_2016(dbcon, instances$xml[i], test=test)
}
if (instances$xform_id[i]==56){
house_hold_15_may_2016_v1(dbcon, instances$xml[i], test=test)
}
if (instances$xform_id[i]==41){
eplot_15_may_2016_v1(dbcon, instances$xml[i], test=test)
}
if (instances$xform_id[i]==33){
ffs_yields_dry_weight_17_sep_2015_v1(dbcon, instances$xml[i], test=test)
}
if (instances$xform_id[i]==47){
vs_household_secv_15_may_2016(dbcon, instances$xml[i], test=test)
}
}
library(dplyr)
library(dbplyr)
library(XML)
library(RPostgreSQL)
library(readxl)
library(tidyr)
setwd('C://Git/vs-migrate/')
db <- 'local'
#db <- 'prod'
#This variable determines whether 1) the script will overwrite exisiting data and 2) the migration will be added to the migration_audit table.
test <- FALSE
#test <- TRUE
forms <- c('vs_household_secv_15_may_2016', 'ffs_yields_dry_weight_17_sep_2015_v1',
'ffs_yields_paddy_maize_17_sep_2015_v1', 'eplot_15_may_2016_v1',
'agriculture_survey_15_may_2016', 'house_hold_15_may_2016_v1')
options(stringsAsFactors = F)
source('utils.R')
source('formhub_connection.R')
fhcon <- src_postgres(dbname = dbname, host = host, port = port, user = user, password = password)
if (db=='prod'){
source('production_connection.R')
dbcon <- src_postgres(dbname = dbname, host = host, port = port, user = user, password = password)
}
if (db=='local'){
source('local_connection.R')
dbcon <- src_postgres(dbname = dbname, host = host, port = port, user = user, password = password)
}
#Get a list of all xform ids
xforms <- tbl(fhcon, 'odk_logger_xform') %>%
select(id, id_string) %>%
collect
ids <- xforms$id[xforms$id_string %in% forms]
#Get a list of all previous migration IDs
migrations <- tbl(dbcon, 'migration_audit') %>%
select(uuid) %>%
collect %>%
.$uuid
#Get all forms that do not have an ID in migration_audit
instances <- tbl(fhcon, 'odk_logger_instance') %>%
filter((!uuid %in% migrations)) %>%
select(xml, uuid, xform_id) %>%
collect %>%
filter(xform_id %in% ids)
scripts <- list.files(path='migrations', pattern='.R$', recursive = T)
for (s in scripts){
source(paste0('migrations/', s))
}
for (i in nrow(instances):1){
cat(i, i/nrow(instances), '\n')
if (instances$xform_id[i]==34){
ffs_yields_maize_17_sep_2015_v1(dbcon, instances$xml[i], test=test)
}
if (instances$xform_id[i]==63){
agriculture_survey_15_may_2016(dbcon, instances$xml[i], test=test)
}
if (instances$xform_id[i]==56){
house_hold_15_may_2016_v1(dbcon, instances$xml[i], test=test)
}
if (instances$xform_id[i]==41){
eplot_15_may_2016_v1(dbcon, instances$xml[i], test=test)
}
if (instances$xform_id[i]==33){
ffs_yields_dry_weight_17_sep_2015_v1(dbcon, instances$xml[i], test=test)
}
if (instances$xform_id[i]==47){
vs_household_secv_15_may_2016(dbcon, instances$xml[i], test=test)
}
}
xforms
ids
migrations
instances
i
instances$xform_id[i]
tail(instances)
table(instances$xform_id)
instances <- tbl(fhcon, 'odk_logger_instance') %>%
#filter((!uuid %in% migrations)) %>%
select(xml, uuid, xform_id) %>%
collect
#Get all forms that do not have an ID in migration_audit
instances <- tbl(fhcon, 'odk_logger_instance') %>%
#filter((!uuid %in% migrations)) %>%
select(uuid, xform_id) %>%
collect %>%
#filter(xform_id %in% ids)
scripts <- list.files(path='migrations', pattern='.R$', recursive = T)
#Get all forms that do not have an ID in migration_audit
instances <- tbl(fhcon, 'odk_logger_instance') %>%
#filter((!uuid %in% migrations)) %>%
select(uuid, xform_id) %>%
collect# %>%
dim(instances)
head(instances)
'e68634b1-bed3-42bd-a8a0-8e2797c7d40f' %in% instances$uuid
ids
#Get all forms that do not have an ID in migration_audit
instances <- tbl(fhcon, 'odk_logger_instance') %>%
filter((!uuid %in% migrations)) %>%
select(uuid, xform_id) %>%
collect %>%
filter(xform_id %in% ids)
'e68634b1-bed3-42bd-a8a0-8e2797c7d40f' %in% instances$uuid
migrations
'e68634b1-bed3-42bd-a8a0-8e2797c7d40f' %in% migrations
migrations <- tbl(dbcon, 'migration_audit') %>%
#select(uuid) %>%
collect
head(migrations)
migrations[migrations$uuid=='e68634b1-bed3-42bd-a8a0-8e2797c7d40f', ]
tail(migrations)
library(dplyr)
library(dbplyr)
library(XML)
library(RPostgreSQL)
library(readxl)
library(tidyr)
setwd('C://Git/vs-migrate/')
db <- 'local'
#db <- 'prod'
#This variable determines whether 1) the script will overwrite exisiting data and 2) the migration will be added to the migration_audit table.
#test <- FALSE
test <- TRUE
forms <- c('vs_household_secv_15_may_2016', 'ffs_yields_dry_weight_17_sep_2015_v1',
'ffs_yields_paddy_maize_17_sep_2015_v1', 'eplot_15_may_2016_v1',
'agriculture_survey_15_may_2016', 'house_hold_15_may_2016_v1')
options(stringsAsFactors = F)
source('utils.R')
source('formhub_connection.R')
fhcon <- src_postgres(dbname = dbname, host = host, port = port, user = user, password = password)
if (db=='prod'){
source('production_connection.R')
dbcon <- src_postgres(dbname = dbname, host = host, port = port, user = user, password = password)
}
if (db=='local'){
source('local_connection.R')
dbcon <- src_postgres(dbname = dbname, host = host, port = port, user = user, password = password)
}
#Get a list of all xform ids
xforms <- tbl(fhcon, 'odk_logger_xform') %>%
select(id, id_string) %>%
collect
ids <- xforms$id[xforms$id_string %in% forms]
#Get a list of all previous migration IDs
migrations <- tbl(dbcon, 'migration_audit') %>%
select(uuid) %>%
collect %>%
.$uuid
#Get all forms that do not have an ID in migration_audit
instances <- tbl(fhcon, 'odk_logger_instance') %>%
filter((!uuid %in% migrations)) %>%
select(xml, uuid, xform_id) %>%
collect %>%
filter(xform_id %in% ids)
scripts <- list.files(path='migrations', pattern='.R$', recursive = T)
for (s in scripts){
source(paste0('migrations/', s))
}
instances
table(instances$xform_id)
instances$uuid
hh_v <- tbl(dbcon, 'household_secV')
hh_v <- tbl(dbcon, 'pii_household')
hh_v <- tbl(dbcon, 'piiname_household')
head(hh_v)
hh_v <- tbl(dbcon, 'householdcontact')
head(hh_v)
instances %in% hh_v$uuid
instances
instances$uuid %in% hh_v$uuid
dbcon
library(dplyr)
library(dbplyr)
library(XML)
library(RPostgreSQL)
library(readxl)
library(tidyr)
setwd('C://Git/vs-migrate/')
db <- 'local'
#db <- 'prod'
#This variable determines whether 1) the script will overwrite exisiting data and 2) the migration will be added to the migration_audit table.
#test <- FALSE
test <- TRUE
forms <- c('vs_household_secv_15_may_2016', 'ffs_yields_dry_weight_17_sep_2015_v1',
'ffs_yields_paddy_maize_17_sep_2015_v1', 'eplot_15_may_2016_v1',
'agriculture_survey_15_may_2016', 'house_hold_15_may_2016_v1')
options(stringsAsFactors = F)
source('utils.R')
source('formhub_connection.R')
fhcon <- src_postgres(dbname = dbname, host = host, port = port, user = user, password = password)
if (db=='prod'){
source('production_connection.R')
dbcon <- src_postgres(dbname = dbname, host = host, port = port, user = user, password = password)
}
if (db=='local'){
source('local_connection.R')
dbcon <- src_postgres(dbname = dbname, host = host, port = port, user = user, password = password)
}
library(dplyr)
library(dbplyr)
library(XML)
library(RPostgreSQL)
library(readxl)
library(tidyr)
setwd('C://Git/vs-migrate/')
db <- 'local'
#db <- 'prod'
#This variable determines whether 1) the script will overwrite exisiting data and 2) the migration will be added to the migration_audit table.
test <- FALSE
#test <- TRUE
forms <- c('vs_household_secv_15_may_2016', 'ffs_yields_dry_weight_17_sep_2015_v1',
'ffs_yields_paddy_maize_17_sep_2015_v1', 'eplot_15_may_2016_v1',
'agriculture_survey_15_may_2016', 'house_hold_15_may_2016_v1')
options(stringsAsFactors = F)
source('utils.R')
source('formhub_connection.R')
fhcon <- src_postgres(dbname = dbname, host = host, port = port, user = user, password = password)
if (db=='prod'){
source('production_connection.R')
dbcon <- src_postgres(dbname = dbname, host = host, port = port, user = user, password = password)
}
if (db=='local'){
source('local_connection.R')
dbcon <- src_postgres(dbname = dbname, host = host, port = port, user = user, password = password)
}
#Get a list of all xform ids
xforms <- tbl(fhcon, 'odk_logger_xform') %>%
select(id, id_string) %>%
collect
ids <- xforms$id[xforms$id_string %in% forms]
#Get a list of all previous migration IDs
migrations <- tbl(dbcon, 'migration_audit') %>%
select(uuid) %>%
collect %>%
.$uuid
#Get all forms that do not have an ID in migration_audit
instances <- tbl(fhcon, 'odk_logger_instance') %>%
filter((!uuid %in% migrations)) %>%
select(xml, uuid, xform_id) %>%
collect %>%
filter(xform_id %in% ids)
scripts <- list.files(path='migrations', pattern='.R$', recursive = T)
for (s in scripts){
source(paste0('migrations/', s))
}
for (i in nrow(instances):1){
cat(i, i/nrow(instances), '\n')
if (instances$xform_id[i]==34){
ffs_yields_maize_17_sep_2015_v1(dbcon, instances$xml[i], test=test)
}
if (instances$xform_id[i]==63){
agriculture_survey_15_may_2016(dbcon, instances$xml[i], test=test)
}
if (instances$xform_id[i]==56){
house_hold_15_may_2016_v1(dbcon, instances$xml[i], test=test)
}
if (instances$xform_id[i]==41){
eplot_15_may_2016_v1(dbcon, instances$xml[i], test=test)
}
if (instances$xform_id[i]==33){
ffs_yields_dry_weight_17_sep_2015_v1(dbcon, instances$xml[i], test=test)
}
if (instances$xform_id[i]==47){
vs_household_secv_15_may_2016(dbcon, instances$xml[i], test=test)
}
}
